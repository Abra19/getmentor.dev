# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      APPSIGNAL_PUSH_API_KEY: ${{ secrets.APPSIGNAL_PUSH_API_KEY }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      # Runs a single command using the runners shell
      - name: Build
        run: |
          yarn install --frozen-lockfile
          yarn build

  deploy-notification:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Create deployment notification
        uses: actions/github-script@v4
        with:
          script: |
            const https = require('https')
            const deployment_payload = JSON.stringify({
              "revision": context.sha,
              "user": context.payload.sender.login
            })
            const options = {
              hostname: 'push.appsignal.com',
              port: 443,
              path: `/1/markers?api_key=${secrets.APPSIGNAL_PUSH_API_KEY}&name=getmentor&environment=production`,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': deployment_payload.length
              }
            }
            const req = https.request(options, res => {})
            req.on('error', error => {
              console.error(error)
            })
            req.write(deployment_payload)
            req.end()